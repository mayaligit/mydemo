<?xml version = "1.0" encoding = "UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD com.example.Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace = "com.cmic.attendance.dao.AttendanceUserDao">
    <sql id="attendanceUserColumns">
        a.id AS "id",
        a.attendance_username AS "attendanceUsername",
        a.attendance_phone AS "attendancePhone",
        a.attendance_password AS "attendancePassword",
        a.attendance_group AS "attendanceGroup",
        a.enterprise_id AS "enterpriseId",
        a.enterprise_name AS "enterpriseName",
        a.user_type AS "userType",
        a.actived AS "actived",
        a.remarks AS "remarks",
        a.create_by AS "createBy.id",
        a.create_date AS "createDate",
        a.update_by AS "updateBy.id",
        a.update_date AS "updateDate"
    </sql>

    <sql id="attendanceUserJoins">
    </sql>

    <select id="get" resultType="AttendanceUser">
        SELECT
        <include refid="attendanceUserColumns"/>
        FROM t_attendance_user a
        <include refid="attendanceUserJoins"/>
        WHERE a.id = #{id}
    </select>

    <select id="findList" resultType="AttendanceUser">
        SELECT
        <include refid="attendanceUserColumns"/>
        FROM t_attendance_user a
        <include refid="attendanceUserJoins"/>
        <where>
            1 = 1
        </where>
    </select>

    <select id="findAllList" resultType="AttendanceUser">
        SELECT
        <include refid="attendanceUserColumns"/>
        FROM t_attendance_user a
        <include refid="attendanceUserJoins"/>
    </select>

    <select id="checkUserByName" resultType="AttendanceUser">
        SELECT
        <include refid="attendanceUserColumns"/>
        FROM t_attendance_user a
        WHERE  a.attendance_username=#{userName}
    </select>

    <insert id="insert">
        INSERT INTO t_attendance_user(
        id,
        attendance_username,
        attendance_phone,
        attendance_password,
        attendance_group,
        enterprise_id,
        enterprise_name,
        user_type,
        actived,
        remarks,
        create_by,
        create_date,
        update_by,
        update_date
        ) VALUES (
        #{id},
        #{attendanceUsername},
        #{attendancePhone},
        #{attendancePassword},
        #{attendanceGroup},
        #{enterpriseId},
        #{enterpriseName},
        #{userType},
        #{actived},
        #{remarks},
        #{createBy.id},
        #{createDate},
        #{updateBy.id},
        #{updateDate}
        )
    </insert>

    <update id="update">
        UPDATE t_attendance_user SET
        attendance_username = #{attendanceUsername},
        attendance_phone = #{attendancePhone},
        attendance_password = #{attendancePassword},
        attendance_group = #{attendanceGroup},
        enterprise_id = #{enterpriseId},
        enterprise_name = #{enterpriseName},
        user_type = #{userType},
        actived = #{actived},
        remarks = #{remarks},
        create_by = #{createBy.id},
        update_by = #{updateBy.id},
        update_date = #{updateDate}
        WHERE id = #{id}
    </update>

    <update id="dynamicUpdate">
        UPDATE t_attendance_user SET
        <if test="attendanceUsername != null  and attendanceUsername != ''">
            attendance_username = #{attendanceUsername},
        </if>
        <if test="attendancePhone != null  and attendancePhone != ''">
            attendance_phone = #{attendancePhone},
        </if>
        <if test="attendancePassword != null  and attendancePassword != ''">
            attendance_password = #{attendancePassword},
        </if>
        <if test="attendanceGroup != null  and attendanceGroup != ''">
            attendance_group = #{attendanceGroup},
        </if>
        <if test="enterpriseId != null  and enterpriseId != ''">
            enterprise_id = #{enterpriseId},
        </if>
        <if test="enterpriseName != null  and enterpriseName != ''">
            enterprise_name = #{enterpriseName},
        </if>
        <if test="userType != null  and userType != ''">
            user_type = #{userType},
        </if>
        <if test="actived != null  and actived != ''">
            actived = #{actived},
        </if>
        update_by = #{updateBy.id},
        update_date = #{updateDate}
        WHERE id = #{id}
    </update>

    <delete id="delete">
        DELETE FROM t_attendance_user
        WHERE id = #{id}
    </delete>

    <select id="findAttendanceUserList" resultType="Map" parameterType="Map">
        SELECT
        a.id as id , a.attendance_username as attendanceUsername ,
        a.attendance_phone AS attendancePhone ,
        a.attendance_password as attendancePassword,
        attendance_group as attendanceGroup,
        user_type as userType,
        actived as actived
       FROM t_attendance_user a
        <where>
            1=1
            <if test="attendanceUsername != null and attendanceUsername != ''">
                and attendance_username LIKE '%${attendanceUsername}%'
            </if>
            <if test="attendancePhone != null and attendancePhone != ''">
                and attendance_phone LIKE '%${attendancePhone}%'
            </if>
            <if test="attendancePassword != null and attendancePassword != ''">
                and attendance_password LIKE '%${attendancePassword}%'
            </if>
            <if test="attendanceGroup != null and attendanceGroup != ''">
                and attendance_group LIKE '%${attendanceGroup}%'
            </if>
        </where>

    </select>


    <update id="updateUserById" parameterType="map">
        UPDATE t_attendance_user SET
        <if test="attendanceUsername != null  and attendanceUsername != ''">
            attendance_username = #{attendanceUsername},
        </if>
        <if test="attendancePhone != null  and attendancePhone != ''">
            attendance_phone = #{attendancePhone},
        </if>
        <if test="attendancePassword != null  and attendancePassword != ''">
            attendance_password = #{attendancePassword},
        </if>
        <if test="attendanceGroup != null  and attendanceGroup != ''">
            attendance_group = #{attendanceGroup},
        </if>
        <if test="enterpriseId != null  and enterpriseId != ''">
            enterprise_id = #{enterpriseId},
        </if>
        <if test="enterpriseName != null  and enterpriseName != ''">
            enterprise_name = #{enterpriseName},
        </if>
        <if test="userType != null  and userType != ''">
            user_type = #{userType},
        </if>
        <if test="actived != null  and actived != ''">
            actived = #{actived},
        </if>
        update_by = #{updateBy.id},
        update_date = #{updateDate}
        WHERE id = #{id}
    </update>



</mapper>